# -*- coding: utf-8 -*-
"""Lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cdkrPMrzf2_gRpk9mrD2_lGSpl3x-3RJ
"""

import pandas as pd
import random
import xml.etree.ElementTree as ET

df = pd.read_csv('books-en.csv', delimiter=';', encoding='latin-1')
df['Price'] = df['Price'].str.replace(',', '.').astype(float)

# Task 1 - Characters in title > 30
long_titles_count = df[df['Book-Title'].str.len() > 30].shape[0]
print(f"Amount of titles with charecters > 30: {long_titles_count}\n")

# Task 2 - Filtered search by author
def search_by_author(author_name, max_price=200):
  results = df[
        (df['Book-Author'].str.contains(author_name, case=False, na=False)) &
        (df['Price'] <= max_price)
    ]

  for i, (_, row) in enumerate(results.iterrows(), 1):
    print(f"{i}. {row['ISBN']} - {row['Book-Title']} - {row['Price']} rubles ({row['Year-Of-Publication']})")

  print(f"Amount of books by '{author_name}' with price up to {max_price} rubles: {len(results)}\n")

search_by_author('Stephen King', max_price=200)

# Task 3 - Generate bibliographic references
def generate_bibliographic_references(num_references=20, output_file='bibliographic_references.txt'):
    random_books = df.sample(n=min(num_references, len(df)), random_state=42)

    references = []
    for i, (_, row) in enumerate(random_books.iterrows(), 1):
        author = row['Book-Author']
        title = row['Book-Title']
        year = row['Year-Of-Publication']
        reference = f"{author}. {title} - {year}"
        references.append(reference)

    with open(output_file, 'w', encoding='utf-8') as f:
        for i, ref in enumerate(references, 1):
            f.write(f"{i}. {ref}\n")

generate_bibliographic_references()

# Task 4 - XML extracting and parsing data
def parse_currency_file():
  tree = ET.parse('currency.xml')
  root = tree.getroot()
  currency_dict = {}

  for currency in root.findall('Valute'):
      numcode = currency.find('NumCode').text
      charcode = currency.find('CharCode').text

      numcode_int = int(numcode)
      currency_dict[numcode_int] = charcode

  print("NumCode - CharCode dictionary:")
  print(currency_dict)


parse_currency_file()